datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Account, User, Session, and VerificationToken based on: https://authjs.dev/reference/adapter/prisma
model Account {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// not in use. we only use jwt for sessions
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // additional fields
  about                     String?
  watchEmailsExpirationDate DateTime?
  lastSyncedHistoryId       String?

  promptHistory PromptHistory[]
  labels        Label[]
  rules         Rule[]
}

// not in use as it's only used for passwordless login
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PromptHistory {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  prompt    String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Label {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  gmailLabelId String
  name         String
  description  String? // used in prompts
  enabled      Boolean  @default(true)
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([gmailLabelId, userId])
  @@unique([name, userId])
}

model Rule {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  name            String?
  instructions    String
  actions         Action[]
  extraActionData Json? // for example, the label id. matching the index of the action
  automate        Boolean  @default(true) // if set to false we display the plan and ask the user to confirm
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Action {
  ARCHIVE
  LABEL
  REPLY
  SEND_EMAIL
  FORWARD
  DRAFT_EMAIL
  SUMMARIZE
  MARK_SPAM
  // SNOOZE
  // ADD_TO_DO
  // CALL_WEBHOOK
  // INTEGRATION // for example, add to Notion
}
