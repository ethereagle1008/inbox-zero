{
  // based on: https://github.com/theodorusclarence/ts-nextjs-tailwind-starter/blob/main/.vscode/typescriptreact.code-snippets
  //#region  //*=========== React ===========
  "React.useState": {
    "prefix": "us",
    "body": [
      "const [${1}, set${1/(^[a-zA-Z])(.*)/${1:/upcase}${2}/}] = React.useState<$3>(${2:initial${1/(^[a-zA-Z])(.*)/${1:/upcase}${2}/}})$0"
    ]
  },
  "React.useEffect": {
    "prefix": "uf",
    "body": ["React.useEffect(() => {", "  $0", "}, []);"]
  },
  "React Functional Component": {
    "prefix": "rc",
    "body": [
      "export function ${1:${TM_FILENAME_BASE}}(props: {}) {",
      "  return (",
      "    <div>",
      "      $0",
      "    </div>",
      "  )",
      "}"
    ]
  },
  //#endregion  //*======== React ===========

  //#region  //*=========== Nextjs ===========
  "Next API Route": {
    "prefix": "napi",
    "body": [
      "import { z } from \"zod\";",
      "import { NextResponse } from \"next/server\";",
      "import { getAuthSession } from \"@/utils/auth\";",
      "import prisma from \"@/utils/prisma\";",
      "import { withError } from \"@/utils/middleware\";",
      "",
      "export type ${1:ApiName}Response = Awaited<",
      "  ReturnType<typeof get${1:ApiName}>",
      ">;",
      "",
      "async function get${1:ApiName}(options: { userId: string }) {",
      "  const result = await prisma.${2:table}.findMany({",
      "    where: {",
      "      userId: options.userId,",
      "    },",
      "  });",
      "  return { result };",
      "}",
      "",
      "export async function GET() {",
      "  const session = await getAuthSession();",
      "  if (!session) return NextResponse.json({ error: \"Not authenticated\" });",
      "",
      "  const result = await get${1:ApiName}({ userId: session.user.id });",
      "",
      "  return NextResponse.json(result);",
      "}",
      "",
      "const ${1:ApiName}Body = z.object({ message: z.string() });",
      "export type ${1/(.*)/${1:/downcase}/}Body = z.infer<typeof ${1:ApiName}Body>;",
      "export type update${1:ApiName}Response = Awaited<ReturnType<typeof ${1:ApiName}>>;",
      "",
      "export const POST = withError(async (request: Request) => {",
      "  const session = await getAuthSession();",
      "  if (!session) return NextResponse.json({ error: \"Not authenticated\" });",
      "",
      "  const json = await request.json();",
      "  const body = ${1/(.*)/${1:/downcase}/}Body.parse(json);",
      "",
      "  const result = await prisma.${2:table}.update({",
      "    where: {",
      "      id: params.id,",
      "      userId: session.user.id,",
      "    },",
      "    data: body",
      "  })",
      "",
      "  return NextResponse.json(result);",
      "});",
      "",
      "",
      "export async function DELETE(_request: Request, params: { id: string }) {",
      "  const session = await getAuthSession();",
      "  if (!session) return NextResponse.json({ error: \"Not authenticated\" });",
      "",
      "  const result = await prisma.${2:table}.delete({",
      "    where: {",
      "      id: params.id,",
      "      userId: session.user.id,",
      "    }",
      "  })",
      "",
      "  return NextResponse.json(result);",
      "}",
      ""
    ],
    "description": "Next API Route"
  },
  //#endregion  //*======== Nextjs ===========

  //#region  //*=========== Snippet Wrap ===========
  "Wrap with Fragment": {
    "prefix": "ff",
    "body": ["<>", "\t${TM_SELECTED_TEXT}", "</>"]
  },
  "Wrap with clsx": {
    "prefix": "cx",
    "body": ["{clsx(${TM_SELECTED_TEXT}$0)}"]
  },
  "Wrap with memo": {
    "prefix": "mem",
    "body": ["const value = useMemo(() => (${TM_SELECTED_TEXT}), [])"]
  },
  //#endregion  //*======== Snippet Wrap ===========

  //#region  //*=========== Custom ===========
  "React Hook Form": {
    "prefix": "rhf",
    "body": [
      "import { useCallback } from 'react';",
      "import { SubmitHandler, useForm } from 'react-hook-form';",
      "import { Button } from '@/components/Button';",
      "import { Input } from '@/components/Input';",
      "import { toastSuccess, toastError } from '@/components/Toast';",
      "import { isErrorMessage } from '@/utils/error';",
      "",
      "type Inputs = { address: string };",
      "",
      "const ${1:${TM_FILENAME_BASE/(^[a-zA-Z])(.*)/${1:/upcase}${2}/}}Form = () => {",
      "  const { register, handleSubmit, formState: { errors, isSubmitting } } = useForm<Inputs>();",
      "",
      "  const onSubmit: SubmitHandler<Inputs> = useCallback(",
      "    async data => {",
      "      const res = await updateProfile(data)",
      "      if (isErrorMessage(res)) toastError({ description: `` });",
      "      else toastSuccess({ description: `` });",
      "    },",
      "    []",
      "  );",
      "",
      "  return (",
      "    <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">",
      "      <Input",
      "        type=\"text\"",
      "        name=\"address\"",
      "        label=\"Address\"",
      "        registerProps={register('address', { required: true })}",
      "        error={errors.address}",
      "      />",
      "      <Button type=\"submit\" loading={isSubmitting}>",
      "        Add",
      "      </Button>",
      "    </form>",
      "  );",
      "}"
    ]
  },
  "Use API Hook": {
    "prefix": "uah",
    "body": [
      "import useSWR from 'swr';",
      "import { BASE_URI } from '@/utils/configPublic';",
      "import { $3Response } from '@/pages/api/$2';",
      "import { ErrorMessage } from '@/utils/error';",
      "",
      "export function ${1:${TM_FILENAME_BASE}}() {",
      "  const url = `\\${BASE_URI}/api/$2`;",
      "  const res = useSWR<$3Response, { error: string }>(url);",
      "  return res;",
      "}"
    ]
  },
  "SWR": {
    "prefix": "swr",
    "body": [
      "\"use client\";",
      "",
      "import useSWR from \"swr\";",
      "import { LoadingContent } from \"@/components/LoadingContent\";",
      "",
      "export default function Page() {",
      "  const { data, isLoading, error } = useSWR<Response, { error: string }>(`/api/user/stats`);",
      "",
      "  return (",
      "    <LoadingContent loading={isLoading} error={error}>",
      "      {data && (",
      "        <div />",
      "      )}",
      "    </LoadingContent>",
      "  );",
      "}",
      ""
    ],
    "description": "SWR"
  },
  //#endregion  //*======== Custom ===========

  "Logger": {
    "prefix": "lg",
    "body": [
      "console.log({ ${1:${CLIPBOARD}} }, '${TM_FILENAME} line ${TM_LINE_NUMBER}')"
    ]
  },
  "Simple Logger": {
    "prefix": "cl",
    "body": ["console.log('$1')"]
  },
  "Error Logger": {
    "prefix": "ce",
    "body": ["console.error('$1')"]
  },
  "Use Client": {
    "prefix": "uc",
    "body": ["'use client';\n"]
  }
}
